
/Users/bytedance/Documents/os/30dayos/code/build/source/boot/boot.elf:     file format elf32-i386
/Users/bytedance/Documents/os/30dayos/code/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000c3b memsz 0x00000c3b flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000c3b  2**0
                  CONTENTS, READONLY
  2 .comment      00000012  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   0000005d  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 0000003f  00000000  00000000  00000ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   000000a4  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_frame  00000034  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    0000010b  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line_str 000000ba  00000000  00000000  00000f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00007c00 l       .text	00000000 main
00007c10 l       .text	00000000 read_kernel
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00000000         *UND*	00000000 _start
00007c24 g     F .text	00000017 boot_main
00008c3b g       .text	00000000 __bss_start
00008c3b g       .text	00000000 _edata
00008c3c g       .text	00000000 _end



Disassembly of section .text:

00007c00 <main>:
  	.code16
 	.text
	.extern boot_main
main:
	// 重置数据段寄存器
	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c0b:	8e e8                	mov    %ax,%gs
	// 根据https://wiki.osdev.org/Memory_Map_(x86)
	// 使用0x7c00之前的空间作栈，大约有30KB的RAM，足够boot和loader使用
	mov $main,%sp
    7c0d:	bc 00 7c             	mov    $0x7c00,%sp

00007c10 <read_kernel>:

	// 加载loader，只支持磁盘1
	// https://wiki.osdev.org/Disk_access_using_the_BIOS_(INT_13h)
read_kernel:
	mov $0x8000, %bx	// 读取到的内存地址
    7c10:	bb 00 80             	mov    $0x8000,%bx
	mov $0x2, %cx		// ch:磁道号，cl起始扇区号
    7c13:	b9 02 00             	mov    $0x2,%cx
	mov $0x2, %ah		// ah: 0x2读磁盘命令
    7c16:	b4 02                	mov    $0x2,%ah
	mov $128, %al		// al: 读取的扇区数量, 必须不大于128，这里使用64k作为kernel，若是kernel太大会出问题，可以尝试多读几次
    7c18:	b0 80                	mov    $0x80,%al
	mov $0x0080, %dx	// dh: 磁头号，dl驱动器号0x80(磁盘1)
    7c1a:	ba 80 00             	mov    $0x80,%dx
	int $0x13
    7c1d:	cd 13                	int    $0x13
	jc read_kernel      // 发生失败重复读取
    7c1f:	72 ef                	jb     7c10 <read_kernel>

	// 跳转至c部分执行，再由c部分做一些处理
	jmp boot_main
    7c21:	e9 00 00             	jmp    7c24 <boot_main>

00007c24 <boot_main>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_main() {
    7c24:	66 55                	push   %ebp
    7c26:	66 89 e5             	mov    %esp,%ebp
    7c29:	66 83 ec 08          	sub    $0x8,%esp
	((void (*)())LOADER_ADDR)();
    7c2d:	66 b8 00 80 00 00    	mov    $0x8000,%eax
    7c33:	66 ff d0             	call   *%eax
} 
    7c36:	90                   	nop
    7c37:	66 c9                	leavel
    7c39:	66 c3                	retl
